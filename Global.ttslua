--[[
Cryptid
Scripted by Sionar
--]]


------------------Constants
MOD_NAME = 'Cryptid'
VERSION = '1.5.5'
DEBUG = true
DEBUG_GAMENUM = 1
START_MESSAGE = '[FF4040]Cryptid[-]\nVersion [00FF00]' .. VERSION..'[-]\nScripted by [49D5FD]Sionar[-]\n'
COLORS = {'Red', 'Teal', 'Purple', 'Brown', 'Pink',}
COLORS_ALL = {'Red', 'Teal', 'Purple', 'Brown', 'Pink', 'Black', 'Grey'}
TAGS = {Red = 'r', Teal = 't', Purple = 'p', Brown = 'b', Pink = 'k', Black = 'l', Grey = 'y'}
COLOR_DARK = '#303030'
MAP_POS =
{
    {-6.89, 1.11, 7.89},
    {6.89, 1.11, 7.89},
    {-6.89, 1.11, 0.00},
    {6.89, 1.11, 0.00},
    {-6.89, 1.11, -7.89},
    {6.89, 1.11, -7.89},
}
MARKER_POS =
{
    Red = {0,1,-20},
    Teal = {-19.02,1,-6.18},
    Purple = {-11.76,1,16.18},
    Brown = {11.76,1,16.18},
    Pink = {19.02,1,-6.18},
}

GRID_X_START = -12.68
GRID_Z_START = 11.32
GRID_X_SPACING = 2.3
GRID_Z_SPACING = -2.65
GRID_X = {}
GRID_Z = {}
for i = 1,12 do
    GRID_X[i] = GRID_X_START + (i-1) * GRID_X_SPACING
end
for i = 1,9 do
    GRID_Z[i] = GRID_Z_START + (i-1) * GRID_Z_SPACING
end
VALID_HEXES = {}
for x = 1,12 do
    VALID_HEXES[x] = {}
    for y = 1,9 do
        VALID_HEXES[x][y] = {{},{},{},{}}
        if x%2 == 1 then
            hexes =
            {
                {{x,y},},
                {{x-1, y-1}, {x-1, y}, {x, y-1}, {x, y+1}, {x+1, y-1}, {x+1, y}},
                {{x-2, y-1}, {x-2, y}, {x-2, y+1}, {x-1, y-2}, {x-1, y+1}, {x, y-2}, {x, y+2}, {x+1, y-2}, {x+1, y+1}, {x+2, y-1}, {x+2, y}, {x+2, y+1},},
                {{x-3, y-2}, {x-3, y-1}, {x-3, y}, {x-3, y+1}, {x-2, y-2}, {x-2, y+2}, {x-1, y-3}, {x-1, y+2}, {x,y-3}, {x,y+3}, {x+1,y-3}, {x+1,y+2}, {x+2,y-2}, {x+2,y+2}, {x+3,y-2}, {x+3,y-1}, {x+3,y}, {x+3,y+1},},
            }
        else
            hexes =
            {
                {{x,y},},
                {{x-1, y}, {x-1, y+1}, {x, y-1}, {x, y+1}, {x+1, y}, {x+1, y+1}},
                {{x-2, y-1}, {x-2, y}, {x-2, y+1}, {x-1, y-1}, {x-1, y+2}, {x, y-2}, {x, y+2}, {x+1, y-1}, {x+1, y+2}, {x+2, y-1}, {x+2, y}, {x+2, y+1},},
                {{x-3, y-1}, {x-3, y}, {x-3, y+1}, {x-3, y+2}, {x-2, y-2}, {x-2, y+2}, {x-1, y-2}, {x-1, y+3}, {x,y-3}, {x,y+3}, {x+1,y-2}, {x+1,y+3}, {x+2,y-2}, {x+2,y+2}, {x+3,y-1}, {x+3,y}, {x+3,y+1}, {x+3,y+2},},
            }
        end
        for i = 1, 4 do
            for k,v in pairs(hexes[i]) do
                if v[1] >= 1 and v[1] <= 12 and v[2] >= 1 and v[2] <= 9 then
                    for j = i, 4 do
                        table.insert(VALID_HEXES[x][y][j], v)
                    end
                end
            end
        end
    end
end

TABLE_GUID = 'e1c8f6'
MAP_GUIDS = {'a70047', '0137df', '38ad67', '7b30ec', '31e825', '81e81d',}
STRUCTURE_GUIDS = {OW = '127a87', TW = 'ba505c', OB = '0df954', TB = 'a1a56c', OG = '096c34', TG = '0add33', OD = '6019a2', TD = '62ecde',}
BAG_GUIDS = {Red = {'db017c','a46d6a'}, Teal = {'699c89','eef40a'}, Purple = {'2c47b4','9b5f69'}, Brown = {'ce8508','1f954d'}, Pink = {'37c717','ad678d'}}
MARKER_GUID = 'a17c99'
HELPER_GUIDS = {Red = '94f3ee', Teal = '864860', Purple = '9bc4dc', Brown = 'db9e6b', Pink = '4a9d68'}
TIMER_GUID = 'f74b73'

------------------Variables
players = {}
seatedPlayers = {}
started = false
mode = 'normal'
checklists = {}
for k,v in pairs(COLORS_ALL) do
    checklists[v] =
    {
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
    }
end
data = {}
map = {}
cluesTable = {}
clues = {}
for i = 1,12 do
    map[i] = {}
    for j = 1,9 do
        map[i][j] = {}
    end
end


------------------Functions
function onLoad(saveString)
    if not (saveString == '') then
        local save = JSON.decode(saveString)
        players = save['p']
        seatedPlayers = save['sp']
        started = save['s']
        mode = save['mo']
        checklists = save['c']
        map = save ['ma']
    end

    setNotes(START_MESSAGE)
    math.randomseed(os.time())
    local seated = getSeatedPlayers()
    local found = false

    local obj
    obj = getObjectFromGUID(TABLE_GUID)
    if obj then
        obj.interactable = false
    end

    obj = getObjectFromGUID(MARKER_GUID)
    if not started then
        obj.interactable = false
    end

    for k,v in pairs(MAP_GUIDS) do
        obj = getObjectFromGUID(v)
        if obj then
            obj.interactable = false
        end
    end

    for k,v in pairs(STRUCTURE_GUIDS) do
        obj = getObjectFromGUID(v)
        if obj then
            obj.interactable = false
        end
    end

    obj = getObjectFromGUID(TABLE_GUID)
    if not started then
        obj.createButton({
            label = 'Start\nNormal Game',
            click_function = 'startNormalGame',
            function_owner = Global,
            position = {0,0.1,3},
            rotation = {0,180,0},
            width = 2500,
            height = 1000,
            font_size = 300,
            color = {0,0,0,1},
            font_color = 'White',
            tooltip = 'Start a normal game.',
        })
        obj.createButton({
            label = 'Start\nAdvanced Game',
            click_function = 'startAdvancedGame',
            function_owner = Global,
            position = {0,0.1,-3},
            rotation = {0,180,0},
            width = 2500,
            height = 1000,
            font_size = 300,
            color = {0,0,0,1},
            font_color = 'White',
            tooltip = 'Start an advanced game.',
        })
    else
        obj.createButton({
            label = 'Reveal\nAll Clues',
            click_function = 'revealClues',
            function_owner = Global,
            position = {0,0.1,17},
            rotation = {0,180,0},
            width = 2500,
            height = 1000,
            font_size = 300,
            color = {0,0,0,1},
            font_color = 'White',
            tooltip = 'Reveal all of the clues.',
        })
        setClues()
    end
    setUI()
    if not started then
        Turns.enable = false
        for k,v in pairs(seated) do
            found = false
            for k1,v1 in pairs(COLORS) do
                if v1 == v then
                    found = true
                end
            end
            if not found then
                Player[v].changeColor('Grey')
            end
        end
    else
        adjustChecklist()
        generateMapUI()
    end
end

function onSave()
    local save = {}
    save['p'] = players
    save['sp'] = seatedPlayers
    save['s'] = started
    save['mo'] = mode
    save['c'] = checklists
    save['ma'] = map
    local saveString = JSON.encode(save)
    return saveString
end

function onPlayerChangeColor(playerColor)
    if started then
        setClues()
    end
end

function onPlayerTurn(player)
    if player.color == '' then
        return
    end
    local obj = getObjectFromGUID(MARKER_GUID)
    if obj then
        obj.setColorTint(stringColorToRGB(player.color))
        obj.setPositionSmooth(MARKER_POS[player.color])
        obj.interactable = true
        obj.setLock(false)
    end
    local obj = getObjectFromGUID(TIMER_GUID)
    if obj then
        obj.call('time3m')
    end
end

function startNormalGame(clickedObject, playerColor)
    if not Player[playerColor].admin then
        return
    end
    local seated = getSeatedPlayers()
    if #seated < 3 and not DEBUG then
        printToColor('You need 3 players seated to start the game.', playerColor, {1,1,1})
        return
    end
    mode = 'normal'
    startGame()
end

function startAdvancedGame(clickedObject, playerColor)
    if not Player[playerColor].admin then
        return
    end
    local seated= getSeatedPlayers()
    if #seated < 3 and not DEBUG then
        printToColor('You need 3 players seated to start the game.', playerColor, {1,1,1})
        return
    end
    mode = 'advanced'
    startGame()
end

function startGame()
    local obj, cluesFound
    local xPos, yPos, zPos, index
    local startColor, colors, tempColor
    local startTime = os.time()

    seatedPlayers = getSeatedPlayers()
    started = true
    obj = getObjectFromGUID(TABLE_GUID)
    obj.clearButtons()
    obj.createButton({
        label = 'Reveal\nAll Clues',
        click_function = 'revealClues',
        function_owner = Global,
        position = {0,0.1,17},
        rotation = {0,180,0},
        width = 2500,
        height = 1000,
        font_size = 300,
        color = {0,0,0,1},
        font_color = 'White',
        tooltip = 'Reveal all of the clues.',
    })

    cluesFound = false
    while cluesFound == false do
        generateRandomMap()
        populateMap()
        cluesFound = generateClues()
    end
    if DEBUG then
        print(os.time() - startTime)
    end
    checkSolution()
    --clues = shuffleTable(clues)

    for i = 1,6 do
        obj = getObjectFromGUID(MAP_GUIDS[data.mapOrder[i]])
        obj.setPositionSmooth(MAP_POS[i])
        if data.mapFlip[i] then
            obj.setRotationSmooth({0,0,0})
        else
            obj.setRotationSmooth({0,180,0})
        end
    end

    for k,v in pairs(STRUCTURE_GUIDS) do
        obj = getObjectFromGUID(v)
        if data.coord[k] ~= nil then
            if string.sub(k,1,1) == 'T' then
                yPos = 1.54
            elseif string.sub(k,1,1) == 'O' then
                yPos = 1.71
            end
            xPos = GRID_X[data.coord[k][1]]
            zPos = GRID_Z[data.coord[k][2]]
            if data.coord[k][1] % 2 == 0 then
                zPos = zPos + GRID_Z_SPACING * 0.5
            end
            obj.setPositionSmooth({xPos, yPos, zPos})
        else
            obj.destruct()
        end
    end

    for k,v in pairs(COLORS) do
        if not Player[v].seated then
            obj = getObjectFromGUID(BAG_GUIDS[v][1])
            obj.destruct()
            obj = getObjectFromGUID(BAG_GUIDS[v][2])
            obj.destruct()
        end
    end

    index = 1
    players = {}
    for k,v in pairs(seatedPlayers) do
        players[v] = {clue = clues[index]}
        index = index + 1
    end
    setClues()

    index = math.random(1,#seatedPlayers)
    startColor = seatedPlayers[index]
    index = 1
    for k,v in pairs(COLORS) do
        if v == startColor then
            index = k
            break
        end
    end
    colors = {}
    for i = 1, 5 do
        table.insert(colors, COLORS[(index + i - 2 ) % 5 + 1])
    end
    Turns.order = colors
    Turns.enable = true
    onPlayerTurn(Player[colors[1]])
    adjustChecklist()
    fillChecklist()
    generateMapUI()
end

function generateRandomMap()
    local structures = {}
    local randCoord = {}
    local match
    local structures = {'OW', 'TW', 'OB', 'TB', 'OG', 'TG', 'OD', 'TD'}
    local coords = {}

    data = {}
    data.mapOrder = shuffleTable({1,2,3,4,5,6})
    data.mapFlip = {}
    data.coord = {}
    for i = 1,6 do
        if math.random(0,1) == 0 then
            table.insert(data.mapFlip, false)
        else
            table.insert(data.mapFlip, true)
        end
    end
    for i = 1,8 do
        match = true
        while match == true do
            match = false
            randCoord = {math.random(1,12), math.random(1,9)}
            for j = 1, i-1 do
                if randCoord[1] == coords[j][1] and randCoord[2] == coords[j][2] then
                    match = true
                end
            end
        end
        table.insert(coords, randCoord)
    end
    for i = 1,8 do
        data.coord[structures[i]] = coords[i]
    end
    if mode == 'normal' then
        data.coord.OD = nil
        data.coord.TD = nil
    end
end

function shuffleTable(array)
    local currIndex, randIndex, temp
    currIndex = #array

    while (currIndex ~= 1) do
        randIndex = math.random(1, currIndex)
        temp = array[currIndex]
        array[currIndex] = array[randIndex]
        array[randIndex] = temp
        currIndex = currIndex - 1
    end
    return array
end

function populateMap()
    local first, last, direction, x, y, step, structure
    local xstart = 1
    local ystart = 1
    for i1 = 1,6 do
        if not data.mapFlip[i1] then
            first = 1
            last = 18
            direction = 1
        else
            first = 18
            last = 1
            direction = -1
        end
        xstart = 1 + 6 * ((i1-1)%2)
        ystart = 1 + math.floor((i1-1)/2) * 3
        step = 1
        for i2 = first, last, direction do
            x = xstart + math.floor((step-1)/3)
            y = ystart + (step-1)%3
            map[x][y].structType = 'N'
            map[x][y].structColor = 'N'
            for k1,v1 in pairs(data.coord) do
                if x == v1[1] and y == v1[2] then
                    map[x][y].structType = string.sub(k1,1,1)
                    map[x][y].structColor = string.sub(k1,2,2)
                end
            end
            map[x][y].terrain = MAP[data.mapOrder[i1]][i2]
            if COUGAR[data.mapOrder[i1]][i2] == 1 then
                map[x][y].animal = 'C'
            elseif BEAR[data.mapOrder[i1]][i2] == 1 then
                map[x][y].animal = 'B'
            else
                map[x][y].animal = 'N'
            end
            step = step + 1
        end
    end
end

function findValidClues()
    local validHexes = {}     --distance of 0,1,2,3
    local distance
    local value, found
    local outputTab = {}
    local map = map
    local startTime = os.time()
    local timeTable = {}

    for i = 1,48 do
        outputTab[i] = {}
        for j = 1,108 do
            outputTab[i][j] = false
        end
    end

    for x = 1,12 do
        for y = 1,9 do
            validHexes = VALID_HEXES[x][y]
            for i = 1,24 do
                found = false
                distance = CLUE_DATA[i].distance
                for k,v in pairs(validHexes[distance+1]) do
                    value = map[v[1]][v[2]][CLUE_DATA[i].type]
                    if value == CLUE_DATA[i].value1 or value == CLUE_DATA[i].value2 then
                        found = true
                        break
                    end
                end
                if found then
                    outputTab[i][(x-1) * 9 + y] = true
                    outputTab[i+24][(x-1) * 9 + y] = false
                else
                    outputTab[i][(x-1) * 9 + y] = false
                    outputTab[i+24][(x-1) * 9 + y] = true
                end
            end
        end
    end
    return outputTab
end

function generateClues()
    local clueMaxIndex, randomClue, numZeroDistClues, validSolution
    local minClues, maxClues, minClueIndex, maxClueIndex
    local found = false
    local tries = 0
    local cluesCount = {}
    local cluesCopy = {}

    if mode == 'normal' then
        clueMaxIndex = 23
    else
        clueMaxIndex = 48
    end

    cluesTable = findValidClues()
    while tries < 10 and not found do
        numZeroDistClues = 0
        minClues = 108
        maxClues = 0
        cluesCopy = Global.getTable('cluesTable')
        clues = {}
        table.insert(clues, math.random(1,clueMaxIndex))
        if CLUE_DATA[clues[1]].distance == 0 then
            numZeroDistClues = numZeroDistClues + 1
        end
        cluesCopy,cluesCount = updateTable(cluesCopy, cluesCopy[clues[1]])
        if #seatedPlayers == 5 then
            randomClue = math.random(1,clueMaxIndex)
            while randomClue == clues[1] or cluesCount[randomClue] == 0 do
                randomClue = math.random(1,clueMaxIndex)
            end
            table.insert(clues, randomClue)
            if CLUE_DATA[clues[2]].distance == 0 then
                numZeroDistClues = numZeroDistClues + 1
            end
            cluesCopy,cluesCount = updateTable(cluesCopy, cluesCopy[clues[2]])
        end
        if #seatedPlayers >= 4 then
            for i = 1,clueMaxIndex do
                if cluesCount[i] < minClues and cluesCount[i] > 1 and not (numZeroDistClues == 2 and CLUE_DATA[i].distance == 0) then
                    minClues = cluesCount[i]
                    minClueIndex = i
                end
            end
            table.insert(clues, minClueIndex)
            if CLUE_DATA[clues[#clues]].distance == 0 then
                numZeroDistClues = numZeroDistClues + 1
            end
            cluesCopy,cluesCount = updateTable(cluesCopy, cluesCopy[clues[#clues]])
        end
        for i = 1,clueMaxIndex do
            if cluesCount[i] < minClues and cluesCount[i] > 1 and not (numZeroDistClues == 2 and CLUE_DATA[i].distance == 0) then
                minClues = cluesCount[i]
                minClueIndex = i
            end
        end
        table.insert(clues, minClueIndex)
        if CLUE_DATA[clues[#clues]].distance == 0 then
            numZeroDistClues = numZeroDistClues + 1
        end
        cluesCopy,cluesCount = updateTable(cluesCopy, cluesCopy[clues[#clues]])
        for i = 1,clueMaxIndex do
            if cluesCount[i] == 1 and not (numZeroDistClues == 2 and CLUE_DATA[i].distance == 0) then
                table.insert(clues, i)
                found = true
                break
            end
        end
        if found and #seatedPlayers > 3 then
            validSolution = checkSolution()
            if not validSolution then
                found = false
            end
            tries = tries + 1
        end
    end
    print(tries)
    return found
end

function updateTable(tab, entries)
    local cluesCount = {}
    local clueMaxIndex

    if mode == 'normal' then
        clueMaxIndex = 23
    else
        clueMaxIndex = 48
    end

    for i = 1, clueMaxIndex do
        cluesCount[i] = 0
        for j = 1, 108 do
            tab[i][j] = tab[i][j] and entries[j]
            if tab[i][j] == true then
                cluesCount[i] = cluesCount[i] + 1
            end
        end
    end
    return tab, cluesCount
end

function checkSolution()
    local cluesCopy, cluesIndexes, cluesCount

    for i = 1, #seatedPlayers do
        cluesIndexes = {}
        cluesCopy = Global.getTable('cluesTable')
        for j = 1, #seatedPlayers do
            if j ~= i then
                table.insert(cluesIndexes,j)
            end
        end
        for k,v in pairs(cluesIndexes) do
            cluesCopy,cluesCount = updateTable(cluesCopy, cluesCopy[clues[v]])
        end
        if cluesCount[clues[cluesIndexes[1]]] == 1 then
            return false
        end
    end
    return true
end

function setClues()
    local obj = getObjectFromGUID(TABLE_GUID)
    for k,v in pairs(players) do
        obj.UI.setAttribute(k..'Clue', 'active', 'true' )
        obj.UI.setValue(k..'Clue', CLUE_DATA[v.clue].name)
    end
end

function revealClues(clickedObject, playerColor)
    if not Player[playerColor].admin then
        return
    end
    local obj = getObjectFromGUID(TABLE_GUID)
    for k,v in pairs(players) do
        obj.UI.setAttribute(k..'Clue', 'visibility', '' )
    end
end

function toggleChecklist(player, value, id)
    local visible = UI.getAttribute(player.color .. 'Table', 'active')
    if visible == 'true' then
        UI.setAttribute(player.color .. 'Table', 'active', 'false')
    else
        UI.setAttribute(player.color .. 'Table', 'active', 'true')
    end
end

function buttonState(player, value, id)
    local color = string.sub(id,2,2)
    local clue = tonumber(string.sub(id,3,string.len(id)))
    local currentState = checklists[player.color][clue][color]
    local buttonColor, text

    if mode == 'normal' and currentState == 1 then
        currentState = 3
    else
        currentState = currentState + 1
    end

    if currentState == 4 then
        currentState = 1
    end
    if currentState == 1 then
        buttonColor = "#E6E42B"
        text = "Maybe"
    elseif currentState == 2 then
        buttonColor = "#F3631C"
        text = "Inverse"
    elseif currentState == 3 then
        buttonColor = "#DA1917"
        text = "No"
    end
    checklists[player.color][clue][color] = currentState

    UI.setAttribute(id, 'color', buttonColor)
    UI.setAttribute(id, 'text', text)
end

function setUI()
    local id, buttonColor, text
    for k,v in pairs(checklists) do
        for k1,v1 in pairs(v) do
            for tag,value in pairs(v1) do
                id = TAGS[k] .. tag .. k1
                if value == 1 then
                    buttonColor = "#E6E42B"
                    text = "Maybe"
                elseif value == 2 then
                    buttonColor = "#F3631C"
                    text = "Inverse"
                elseif value == 3 then
                    buttonColor = "#DA1917"
                    text = "No"
                end
                UI.setAttribute(id, 'color', buttonColor)
                UI.setAttribute(id, 'text', text)
            end
        end
    end
end

function adjustChecklist()
    local columnWidths = {clue = 375, Red = 0, Teal = 0, Purple = 0, Brown = 0, Pink = 0}
    local tableWidth = 375
    local stringValue

    for k,v in pairs(seatedPlayers) do
        columnWidths[v] = 45
        tableWidth = tableWidth + 45
    end
    stringValue = columnWidths.clue .. ' ' .. columnWidths.Red  .. ' ' .. columnWidths.Teal  .. ' ' .. columnWidths.Purple .. ' ' .. columnWidths.Brown  .. ' ' .. columnWidths.Pink

    for k,v in pairs(COLORS_ALL) do
        UI.setAttribute(v .. 'Table', 'width', tableWidth)
        UI.setAttribute(v .. 'Table', 'columnWidths', stringValue)
    end
end

function fillChecklist()
    local index
    for k,v in pairs(seatedPlayers) do
        index = players[v].clue
        if index > 24 then
            index = index - 24
        end
        for i = 1,24 do
            UI.setAttribute(TAGS[v]..TAGS[v]..i, 'color', '#DA1917')
            UI.setAttribute(TAGS[v]..TAGS[v]..i, 'text', 'No')
            checklists[v][i][TAGS[v]] = 3
        end
        for k1,v1 in pairs(COLORS) do
            UI.setAttribute(TAGS[v]..TAGS[v1]..index, 'color', '#DA1917')
            UI.setAttribute(TAGS[v]..TAGS[v1]..index, 'text', 'No')
            checklists[v][index][TAGS[v1]] = 3
        end
        if players[v].clue <= 24 then
            UI.setAttribute(TAGS[v]..TAGS[v]..index, 'color', '#E6E42B')
            UI.setAttribute(TAGS[v]..TAGS[v]..index, 'text', 'Maybe')
            checklists[v][index][TAGS[v]] = 1
        else
            UI.setAttribute(TAGS[v]..TAGS[v]..index, 'color', '#F3631C')
            UI.setAttribute(TAGS[v]..TAGS[v]..index, 'text', 'Inverse')
            checklists[v][index][TAGS[v]] = 2
        end
        if mode == 'normal' then
            for k1, v1 in pairs(COLORS) do
                UI.setAttribute(TAGS[v]..TAGS[v1]..24, 'color', '#DA1917')
                UI.setAttribute(TAGS[v]..TAGS[v1]..24, 'text', 'No')
                checklists[v][24][TAGS[v1]] = 3
            end
        end
    end
end

function generateMapUI()
    local first, last, direction, x, y, step, structure
    local xstart = 1
    local ystart = 1
    for k,v in pairs(COLORS_ALL) do
        for x = 1,12 do
            for y = 1,9 do
                UI.setAttribute(TAGS[v]..x..y, 'image', map[x][y].terrain .. map[x][y].structType .. map[x][y].structColor)
                if map[x][y].animal == 'C' then
                    UI.setAttribute(TAGS[v]..'a'..x..y, 'image', 'Cougar')
                    UI.setAttribute(TAGS[v]..'a'..x..y, 'active', 'true')
                elseif map[x][y].animal == 'B' then
                    map[x][y].animal = 'B'
                    UI.setAttribute(TAGS[v]..'a'..x..y, 'image', 'Bear')
                    UI.setAttribute(TAGS[v]..'a'..x..y, 'active', 'true')
                end
            end
        end
    end
end

function changeHexColor(player, value, id)
    if UI.getAttribute(id, 'color') ~= COLOR_DARK then
        UI.setAttribute(id, 'color', COLOR_DARK)
    else
        UI.setAttribute(id, 'color', '#FFFFFF')
    end
end

function toggleMap(player, value, id)
    if not started then
        player.print('Game has not started.')
        return
    end
    local visible = UI.getAttribute(TAGS[player.color] .. 'col1', 'active')
    if visible == 'true' then
        for i = 1,12 do
            UI.setAttribute(TAGS[player.color] .. 'col' .. i, 'active', 'false')
        end
        UI.setAttribute(TAGS[player.color] .. 'Invert', 'active', 'false')
        UI.setAttribute(TAGS[player.color] .. 'Reset', 'active', 'false')
    else
        for i = 1,12 do
            UI.setAttribute(TAGS[player.color] .. 'col' .. i, 'active', 'true')
        end
        UI.setAttribute(TAGS[player.color] .. 'Invert', 'active', 'true')
        UI.setAttribute(TAGS[player.color] .. 'Reset', 'active', 'true')
    end
end

function invertMap(player, value, id)
    local iden
    for i = 1, 12 do
        for j = 1,9 do
            iden = TAGS[player.color] .. i .. j
            if UI.getAttribute(iden, 'color') ~= COLOR_DARK then
                UI.setAttribute(iden, 'color', COLOR_DARK)
            else
                UI.setAttribute(iden, 'color', '#FFFFFF')
            end
        end
    end
end

function resetMap(player, value, id)
    local iden
    for i = 1, 12 do
        for j = 1,9 do
            iden = TAGS[player.color] .. i .. j
            UI.setAttribute(iden, 'color', '#FFFFFF')
        end
    end
end
