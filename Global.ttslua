--[[
Cryptid
Scripted by Sionar
--]]


------------------Constants
MOD_NAME = 'Cryptid'
VERSION = '1.4.1'
DEBUG = false
DEBUG_GAMENUM = 9
START_MESSAGE = '[FF4040]Cryptid[-]\n\nVersion [00FF00]' .. VERSION..'[-]\nScripted by [967BB6]Sionar[-]\n'
COLORS = {'Red', 'Teal', 'Purple', 'Brown', 'Pink',}
TAGS = {Red = 'r', Teal = 't', Purple = 'p', Brown = 'b', Pink = 'k'}
SYMBOLS = {'alpha', 'beta', 'gamma', 'delta', 'epsil'}
MAP_POS =
{
    {-6.89, 1.11, 7.89},
    {6.89, 1.11, 7.89},
    {-6.89, 1.11, 0.00},
    {6.89, 1.11, 0.00},
    {-6.89, 1.11, -7.89},
    {6.89, 1.11, -7.89},
}
MARKER_POS =
{
    Red = {0,1,-20},
    Teal = {-19.02,1,-6.18},
    Purple = {-11.76,1,16.18},
    Brown = {11.76,1,16.18},
    Pink = {19.02,1,-6.18},
}

GRID_X_START = -12.68
GRID_Z_START = 11.32
GRID_X_SPACING = 2.3
GRID_Z_SPACING = -2.65
GRID_X = {}
GRID_Z = {}
for i = 1,12 do
    GRID_X[i] = GRID_X_START + (i-1) * GRID_X_SPACING
end
for i = 1,9 do
    GRID_Z[i] = GRID_Z_START + (i-1) * GRID_Z_SPACING
end

TABLE_GUID = 'e1c8f6'
MAP_GUIDS = {'a70047', '0137df', '38ad67', '7b30ec', '31e825', '81e81d',}
STRUCTURE_GUIDS = {OW = '127a87', TW = 'ba505c', OB = '0df954', TB = 'a1a56c', OG = '096c34', TG = '0add33', OD = '6019a2', TD = '62ecde',}
BAG_GUIDS = {Red = {'db017c','a46d6a'}, Teal = {'699c89','eef40a'}, Purple = {'2c47b4','9b5f69'}, Brown = {'ce8508','1f954d'}, Pink = {'37c717','ad678d'}}
MARKER_GUID = 'a17c99'
HELPER_GUIDS = {Red = '94f3ee', Teal = '864860', Purple = '9bc4dc', Brown = 'db9e6b', Pink = '4a9d68'}

------------------Variables
gameNum = 1
players = {}
started = false
hintGiven = false
hint = ''
mode = 'normal'
checklists = {}
for k,v in pairs(COLORS) do
    checklists[v] =
    {
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
    }
end


------------------Functions
function onLoad(saveString)
    setNotes(START_MESSAGE)
    if not (saveString == '') then
        local save = JSON.decode(saveString)
        gameNum = save['g']
        players = save['p']
        started = save['s']
        hintGiven = save['hg']
        hint = save['h']
        mode = save['m']
        checklists = save['c']
    end
    math.randomseed(os.time())
    local obj

    obj = getObjectFromGUID(TABLE_GUID)
    if obj then
        obj.interactable = false
    end

    for k,v in pairs(MAP_GUIDS) do
        obj = getObjectFromGUID(v)
        if obj then
            obj.interactable = false
        end
    end
    for k,v in pairs(STRUCTURE_GUIDS) do
        obj = getObjectFromGUID(v)
        if obj then
            if not started then
                obj.interactable = false
            else
                obj.interactable = true
            end
        end
    end
    obj = getObjectFromGUID(MARKER_GUID)
    if not started then
        obj.interactable = false
    end

    obj = getObjectFromGUID(TABLE_GUID)
    if not started then
        obj.createButton({
            label = 'Start\nNormal Game',
            click_function = 'startNormalGame',
            function_owner = Global,
            position = {0,0.1,3},
            rotation = {0,180,0},
            width = 2500,
            height = 1000,
            font_size = 300,
            color = {0,0,0,1},
            font_color = 'White',
            tooltip = 'Start a normal game.',
        })
        obj.createButton({
            label = 'Start\nAdvanced Game',
            click_function = 'startAdvancedGame',
            function_owner = Global,
            position = {0,0.1,-3},
            rotation = {0,180,0},
            width = 2500,
            height = 1000,
            font_size = 300,
            color = {0,0,0,1},
            font_color = 'White',
            tooltip = 'Start an advanced game.',
        })
    else
        obj.createButton({
            label = 'Show Hint',
            click_function = 'showHint',
            function_owner = Global,
            position = {0,0.1,20},
            rotation = {0,180,0},
            width = 2500,
            height = 1000,
            font_size = 300,
            color = {0,0,0,1},
            font_color = 'White',
            tooltip = 'Give a hint.',
        })
        obj.createButton({
            label = 'Reveal\nAll Clues',
            click_function = 'revealClues',
            function_owner = Global,
            position = {0,0.1,17},
            rotation = {0,180,0},
            width = 2500,
            height = 1000,
            font_size = 300,
            color = {0,0,0,1},
            font_color = 'White',
            tooltip = 'Reveal all of the clues.',
        })
        setClues()
    end
    if hintGiven then
        showHint()
    end
    setUI()
    if started then
        generateMap()
    end
end

function onSave()
    local save = {}
    save['g'] = gameNum
    save['p'] = players
    save['s'] = started
    save['hg'] = hintGiven
    save['h'] = hint
    save['m'] = mode
    save['c'] = checklists
    local saveString = JSON.encode(save)
    return saveString
end

function onPlayerChangeColor(playerColor)
    if started then
        setClues()
    end
end

function onPlayerTurn(player)
    if player.color == '' then
        return
    end
    local obj = getObjectFromGUID(MARKER_GUID)
    if obj then
        obj.setColorTint(stringColorToRGB(player.color))
        obj.setPositionSmooth(MARKER_POS[player.color])
        obj.interactable = true
        obj.setLock(false)
    end
end

function startNormalGame(clickedObject, playerColor)
    if not DEBUG then
        gameNum = math.random(1,19)
        mode = 'normal'
    else
        gameNum = DEBUG_GAMENUM
    end
    startGame(clickedObject, playerColor)
end

function startAdvancedGame(clickedObject, playerColor)
    if not DEBUG then
        gameNum = math.random(20,54)
        mode = 'advanced'
    else
        gameNum = DEBUG_GAMENUM
    end
    startGame(clickedObject, playerColor)
end

function startGame(clickedObject, playerColor)
    local obj, xPos, zPos, seatedPlayers, clues, index, found, startColor, colors, tempColor
    local turnOrder = {}

    if not Player[playerColor].admin then
        return
    end

    seatedPlayers = getSeatedPlayers()
    if #seatedPlayers < 3 and not DEBUG then
        printToColor('You need 3 players seated to start the game.', playerColor, {1,1,1})
        return
    end

    if DEBUG then
        print(gameNum)
    end

    started = true
    for i = 1,6 do
        obj = getObjectFromGUID(MAP_GUIDS[DATA[gameNum].mapOrder[i]])
        obj.setPositionSmooth(MAP_POS[i])
        if DATA[gameNum].mapFlip[i] then
            obj.setRotationSmooth({0,0,0})
        else
            obj.setRotationSmooth({0,180,0})
        end
    end

    for k,v in pairs(STRUCTURE_GUIDS) do
        obj = getObjectFromGUID(v)
        if DATA[gameNum].coord[k] ~= nil then
            xPos = GRID_X[DATA[gameNum].coord[k][1]]
            zPos = GRID_Z[DATA[gameNum].coord[k][2]]
            if DATA[gameNum].coord[k][1] % 2 == 0 then
                zPos = zPos + GRID_Z_SPACING * 0.5
            end
            obj.setPositionSmooth({xPos, 1.81, zPos})
            obj.interactable = true
        else
            obj.destruct()
        end
    end
    obj = getObjectFromGUID(TABLE_GUID)
    obj.clearButtons()
    obj.createButton({
        label = 'Show Hint',
        click_function = 'showHint',
        function_owner = Global,
        position = {0,0.1,20},
        rotation = {0,180,0},
        width = 2500,
        height = 1000,
        font_size = 300,
        color = {0,0,0,1},
        font_color = 'White',
        tooltip = 'Give a hint.',
    })
    obj.createButton({
        label = 'Reveal\nAll Clues',
        click_function = 'revealClues',
        function_owner = Global,
        position = {0,0.1,17},
        rotation = {0,180,0},
        width = 2500,
        height = 1000,
        font_size = 300,
        color = {0,0,0,1},
        font_color = 'White',
        tooltip = 'Reveal all of the clues.',
    })

    if #seatedPlayers == 3 or #seatedPlayers < 3 and DEBUG then
        clues = DATA[gameNum].clues3
        hint = HINTS[DATA[gameNum].hints[1]]
    elseif #seatedPlayers == 4 then
        clues = DATA[gameNum].clues4
        hint = HINTS[DATA[gameNum].hints[2]]
    elseif #seatedPlayers == 5 then
        clues = DATA[gameNum].clues5
        hint = HINTS[DATA[gameNum].hints[3]]
    end
    obj.UI.setValue('hint', hint)
    index = 1
    players = {}
    for k,v in pairs(COLORS) do
        if Player[v].seated then
            found = false
            while found == false do
                if clues[SYMBOLS[index]] ~= nil then
                    found = true
                    table.insert(players, {color = v, symbol = SYMBOLS[index], clue = clues[SYMBOLS[index]]})
                end
                index = index + 1
            end
        else
            obj = getObjectFromGUID(BAG_GUIDS[v][1])
            obj.destruct()
            obj = getObjectFromGUID(BAG_GUIDS[v][2])
            obj.destruct()
        end
    end
    setClues()

    index = math.random(1,#seatedPlayers)
    startColor = seatedPlayers[index]
    colors = Global.getTable('COLORS')
    while colors[1] ~= startColor do
        tempColor = table.remove(colors, 1)
        table.insert(colors, tempColor)
    end
    Turns.order = colors
    Turns.enable = false
    Turns.enable = true
    onPlayerTurn(Player[colors[1]])
    hideHelperColumns()
    generateMap()
end

function setClues()
    local obj = getObjectFromGUID(TABLE_GUID)
    for k,v in pairs(players) do
        obj.UI.setAttribute(v.color..'Clue', 'active', true )
        obj.UI.setValue(v.color..'Clue', CLUES[v.symbol][v.clue])
    end
end

function revealClues(clickedObject, playerColor)
    if not Player[playerColor].admin then
        return
    end
    local obj = getObjectFromGUID(TABLE_GUID)
    for k,v in pairs(players) do
        obj.UI.setAttribute(v.color..'Clue', 'visibility', '' )
    end
end

function showHint(clickedObject, playerColor)
    if not Player[playerColor].admin then
        return
    end
    local obj = getObjectFromGUID(TABLE_GUID)
    obj.UI.setValue('hint', hint)
    obj.UI.setAttribute('hint', 'active', true)
    hintGiven = true
end

function toggleChecklist(player, value, id)
    local visible = UI.getAttribute(player.color .. 'Table', 'active')
    if visible == 'true' then
        UI.setAttribute(player.color .. 'Table', 'active', 'false')
    else
        UI.setAttribute(player.color .. 'Table', 'active', 'true')
    end
end

function buttonState(player, value, id)
    local color = string.sub(id,2,2)
    local clue = tonumber(string.sub(id,3,string.len(id)))
    local currentState = checklists[player.color][clue][color]
    local buttonColor, text

    if mode == 'normal' and currentState == 1 then
        currentState = 3
    else
        currentState = currentState + 1
    end

    if currentState == 4 then
        currentState = 1
    end
    if currentState == 1 then
        buttonColor = "#E6E42B"
        text = "Maybe"
    elseif currentState == 2 then
        buttonColor = "#F3631C"
        text = "Inverse"
    elseif currentState == 3 then
        buttonColor = "#DA1917"
        text = "No"
    end
    checklists[player.color][clue][color] = currentState

    UI.setAttribute(id, 'color', buttonColor)
    UI.setAttribute(id, 'text', text)
end

function setUI()
    local id, buttonColor, text
    for k,v in pairs(checklists) do
        for k1,v1 in pairs(v) do
            for tag,value in pairs(v1) do
                id = TAGS[k] .. tag .. k1
                if value == 1 then
                    buttonColor = "#E6E42B"
                    text = "Maybe"
                elseif value == 2 then
                    buttonColor = "#F3631C"
                    text = "Inverse"
                elseif value == 3 then
                    buttonColor = "#DA1917"
                    text = "No"
                end
                UI.setAttribute(id, 'color', buttonColor)
                UI.setAttribute(id, 'text', text)
            end
        end
    end
end

function hideHelperColumns()
    local obj
    local seatedPlayers = getSeatedPlayers()
    local index
    if #seatedPlayers == 4 then
        hideColumn('Red')
    elseif #seatedPlayers == 3 then
        hideColumn('Red')
        hideColumn('Teal')
    end

    for k,v in pairs(COLORS) do
        index = 6 - #seatedPlayers
        for k1,v1 in pairs(seatedPlayers) do
            UI.setAttribute(TAGS[v]..'h'..TAGS[COLORS[index]], 'text', v1 )
            UI.setAttribute(TAGS[v]..'h'..TAGS[COLORS[index]], 'color', v1 )
            index = index + 1
        end
    end
end

function hideColumn(color)
    for k,v in pairs(COLORS) do
        UI.setAttribute(TAGS[v] .. 'h' .. TAGS[color], 'active', false)
        for i = 1,24 do
            UI.setAttribute(TAGS[v] .. TAGS[color] .. i, 'active', false)
        end
    end
end

function generateMap()
    local first, last, direction, x, y, step, terrain
    local xstart = 1
    local ystart = 1
    for k,v in pairs(COLORS) do
        for i1 = 1,6 do
            if not DATA[gameNum].mapFlip[i1] then
                first = 1
                last = 18
                direction = 1
            else
                first = 18
                last = 1
                direction = -1
            end
            xstart = 1 + 6 * ((i1-1)%2)
            ystart = 1 + math.floor((i1-1)/2) * 3
            step = 1
            for i2 = first, last, direction do
                x = xstart + math.floor((step-1)/3)
                y = ystart + (step-1)%3
                terrain = getTerrain(x,y)
                UI.setAttribute(TAGS[v]..x..y, 'image', MAP[DATA[gameNum].mapOrder[i1]][i2] .. terrain)
                if COUGAR[DATA[gameNum].mapOrder[i1]][i2] == 1 then
                    UI.setAttribute(TAGS[v]..'a'..x..y, 'image', 'Cougar')
                    UI.setAttribute(TAGS[v]..'a'..x..y, 'active', true)
                end
                if BEAR[DATA[gameNum].mapOrder[i1]][i2] == 1 then
                    UI.setAttribute(TAGS[v]..'a'..x..y, 'image', 'Bear')
                    UI.setAttribute(TAGS[v]..'a'..x..y, 'active', true)
                end
                step = step + 1
            end
        end
    end
end

function getTerrain(x,y)
    local coordinates = DATA[gameNum].coord
    for k,v in pairs(coordinates) do
        if x == v[1] and y == v[2] then
            return k
        end
    end
    return 'NN'
end

function changeHexColor(player, value, id)
    if UI.getAttribute(id, 'color') ~= '#404040' then
        UI.setAttribute(id, 'color', '#404040')
    else
        UI.setAttribute(id, 'color', '#FFFFFF')
    end
end

function toggleMap(player, value, id)
    if not started then
        return
    end
    local visible = UI.getAttribute(TAGS[player.color] .. 'col1', 'active')
    if visible == 'true' then
        for i = 1,12 do
            UI.setAttribute(TAGS[player.color] .. 'col' .. i, 'active', 'false')
            UI.setAttribute(TAGS[player.color] .. 'Invert', 'active', 'false')
        end
    else
        for i = 1,12 do
            UI.setAttribute(TAGS[player.color] .. 'col' .. i, 'active', 'true')
            UI.setAttribute(TAGS[player.color] .. 'Invert', 'active', 'true')
        end
    end
end

function invertMap(player, value, id)
    local iden
    for i = 1, 12 do
        for j = 1,9 do
            iden = TAGS[player.color] .. i .. j
            if UI.getAttribute(iden, 'color') ~= '#404040' then
                UI.setAttribute(iden, 'color', '#404040')
            else
                UI.setAttribute(iden, 'color', '#FFFFFF')
            end
        end
    end
end
