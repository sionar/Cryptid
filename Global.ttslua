--[[
Cryptid
Scripted by Sionar
--]]


------------------Constants
MOD_NAME = 'Cryptid'
VERSION = '1.5.0'
DEBUG = false
DEBUG_GAMENUM = 1
START_MESSAGE = '[FF4040]Cryptid[-]\nVersion [00FF00]' .. VERSION..'[-]\nScripted by [49D5FD]Sionar[-]\n'
COLORS = {'Red', 'Teal', 'Purple', 'Brown', 'Pink',}
COLORS_ALL = {'Red', 'Teal', 'Purple', 'Brown', 'Pink', 'Black', 'Grey'}
TAGS = {Red = 'r', Teal = 't', Purple = 'p', Brown = 'b', Pink = 'k', Black = 'l', Grey = 'y'}
COLOR_DARK = '#303030'
MAP_POS =
{
    {-6.89, 1.11, 7.89},
    {6.89, 1.11, 7.89},
    {-6.89, 1.11, 0.00},
    {6.89, 1.11, 0.00},
    {-6.89, 1.11, -7.89},
    {6.89, 1.11, -7.89},
}
MARKER_POS =
{
    Red = {0,1,-20},
    Teal = {-19.02,1,-6.18},
    Purple = {-11.76,1,16.18},
    Brown = {11.76,1,16.18},
    Pink = {19.02,1,-6.18},
}

GRID_X_START = -12.68
GRID_Z_START = 11.32
GRID_X_SPACING = 2.3
GRID_Z_SPACING = -2.65
GRID_X = {}
GRID_Z = {}
for i = 1,12 do
    GRID_X[i] = GRID_X_START + (i-1) * GRID_X_SPACING
end
for i = 1,9 do
    GRID_Z[i] = GRID_Z_START + (i-1) * GRID_Z_SPACING
end

TABLE_GUID = 'e1c8f6'
MAP_GUIDS = {'a70047', '0137df', '38ad67', '7b30ec', '31e825', '81e81d',}
STRUCTURE_GUIDS = {OW = '127a87', TW = 'ba505c', OB = '0df954', TB = 'a1a56c', OG = '096c34', TG = '0add33', OD = '6019a2', TD = '62ecde',}
BAG_GUIDS = {Red = {'db017c','a46d6a'}, Teal = {'699c89','eef40a'}, Purple = {'2c47b4','9b5f69'}, Brown = {'ce8508','1f954d'}, Pink = {'37c717','ad678d'}}
MARKER_GUID = 'a17c99'
HELPER_GUIDS = {Red = '94f3ee', Teal = '864860', Purple = '9bc4dc', Brown = 'db9e6b', Pink = '4a9d68'}

------------------Variables
gameNum = 1
players = {}
started = false
mode = 'normal'
checklists = {}
solution = {}
for k,v in pairs(COLORS_ALL) do
    checklists[v] =
    {
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
        {r = 1, t = 1, p = 1, b = 1, k = 1},
    }
end
data = {}
map = {}
validClues = {}
for i = 1,12 do
    map[i] = {}
    for j = 1,9 do
        map[i][j] = {}
        validClues[(i-1)*9 + j] = {}
    end
end
cluesTable = {}
generatedClues = {}


------------------Functions
function onLoad(saveString)
    setNotes(START_MESSAGE)
    if not (saveString == '') then
        local save = JSON.decode(saveString)
        gameNum = save['g']
        players = save['p']
        started = save['s']
        mode = save['m']
        checklists = save['c']
        map = save ['ma']
        cluesTable = save['ct']
        validClues = save['v']
        generatedClues = save['cl']
    end
    math.randomseed(os.time())

    local obj
    obj = getObjectFromGUID(TABLE_GUID)
    if obj then
        obj.interactable = false
    end

    for k,v in pairs(MAP_GUIDS) do
        obj = getObjectFromGUID(v)
        if obj then
            obj.interactable = false
        end
    end
    for k,v in pairs(STRUCTURE_GUIDS) do
        obj = getObjectFromGUID(v)
        if obj then
            obj.interactable = false
        end
    end

    obj = getObjectFromGUID(MARKER_GUID)
    if not started then
        obj.interactable = false
    end

    obj = getObjectFromGUID(TABLE_GUID)
    if not started then
        obj.createButton({
            label = 'Start\nNormal Game',
            click_function = 'startNormalGame',
            function_owner = Global,
            position = {0,0.1,3},
            rotation = {0,180,0},
            width = 2500,
            height = 1000,
            font_size = 300,
            color = {0,0,0,1},
            font_color = 'White',
            tooltip = 'Start a normal game.',
        })
        obj.createButton({
            label = 'Start\nAdvanced Game',
            click_function = 'startAdvancedGame',
            function_owner = Global,
            position = {0,0.1,-3},
            rotation = {0,180,0},
            width = 2500,
            height = 1000,
            font_size = 300,
            color = {0,0,0,1},
            font_color = 'White',
            tooltip = 'Start an advanced game.',
        })
    else
        obj.createButton({
            label = 'Reveal\nAll Clues',
            click_function = 'revealClues',
            function_owner = Global,
            position = {0,0.1,17},
            rotation = {0,180,0},
            width = 2500,
            height = 1000,
            font_size = 300,
            color = {0,0,0,1},
            font_color = 'White',
            tooltip = 'Reveal all of the clues.',
        })
        setClues()
    end
    if not started then
        Turns.enable = false
    end
    setUI()
    if started then
        generateMapUI()
    end
end

function onSave()
    local save = {}
    save['g'] = gameNum
    save['p'] = players
    save['s'] = started
    save['m'] = mode
    save['c'] = checklists
    save['ma'] = map
    save['ct'] = cluesTable
    save['v'] = validClues
    save['cl'] = clues
    local saveString = JSON.encode(save)
    return saveString
end

function onPlayerChangeColor(playerColor)
    if started then
        setClues()
    end
end

function onPlayerTurn(player)
    if player.color == '' then
        return
    end
    local obj = getObjectFromGUID(MARKER_GUID)
    if obj then
        obj.setColorTint(stringColorToRGB(player.color))
        obj.setPositionSmooth(MARKER_POS[player.color])
        obj.interactable = true
        obj.setLock(false)
    end
end

function startNormalGame(clickedObject, playerColor)
    if not Player[playerColor].admin then
        return
    end
    mode = 'normal'
    startGame()
end

function startAdvancedGame(clickedObject, playerColor)
    if not Player[playerColor].admin then
        return
    end
    mode = 'advanced'
    startGame()
end

function startGame()
    local obj, xPos, yPos, zPos, seatedPlayers, clues, index, found, startColor, colors, tempColor
    local turnOrder = {}
    local cluesFound = false

    seatedPlayers = getSeatedPlayers()
    if #seatedPlayers < 3 and not DEBUG then
        printToColor('You need 3 players seated to start the game.', playerColor, {1,1,1})
        return
    end
    started = true
    obj = getObjectFromGUID(TABLE_GUID)
    obj.clearButtons()

    while cluesFound == false do
        generateRandomMap()
        populateMap()
        cluesFound = generateClues()
    end
    generateMapUI()

    for i = 1,6 do
        obj = getObjectFromGUID(MAP_GUIDS[data.mapOrder[i]])
        obj.setPositionSmooth(MAP_POS[i])
        if data.mapFlip[i] then
            obj.setRotationSmooth({0,0,0})
        else
            obj.setRotationSmooth({0,180,0})
        end
    end

    for k,v in pairs(STRUCTURE_GUIDS) do
        obj = getObjectFromGUID(v)
        if data.coord[k] ~= nil then
            if string.sub(k,1,1) == 'T' then
                yPos = 1.54
            elseif string.sub(k,1,1) == 'O' then
                yPos = 1.71
            end
            xPos = GRID_X[data.coord[k][1]]
            zPos = GRID_Z[data.coord[k][2]]
            if data.coord[k][1] % 2 == 0 then
                zPos = zPos + GRID_Z_SPACING * 0.5
            end
            obj.setPositionSmooth({xPos, yPos, zPos})
        else
            obj.destruct()
        end
    end
    obj = getObjectFromGUID(TABLE_GUID)
    obj.createButton({
        label = 'Reveal\nAll Clues',
        click_function = 'revealClues',
        function_owner = Global,
        position = {0,0.1,17},
        rotation = {0,180,0},
        width = 2500,
        height = 1000,
        font_size = 300,
        color = {0,0,0,1},
        font_color = 'White',
        tooltip = 'Reveal all of the clues.',
    })

    index = 1
    players = {}
    for k,v in pairs(seatedPlayers) do
        table.insert(players, {color = v, clue = generatedClues[index]})
        index = index + 1
    end
    setClues()

    for k,v in pairs(COLORS) do
        if not Player[v].seated then
            obj = getObjectFromGUID(BAG_GUIDS[v][1])
            obj.destruct()
            obj = getObjectFromGUID(BAG_GUIDS[v][2])
            obj.destruct()
        end
    end

    index = math.random(1,#seatedPlayers)
    startColor = seatedPlayers[index]
    colors = Global.getTable('COLORS')

    while colors[1] ~= startColor do
        tempColor = table.remove(colors, 1)
        table.insert(colors, tempColor)
    end
    Turns.order = colors
    Turns.enable = true
    onPlayerTurn(Player[colors[1]])
    adjustHelperColumns()
end

function setClues()
    local obj = getObjectFromGUID(TABLE_GUID)
    for k,v in pairs(players) do
        obj.UI.setAttribute(v.color..'Clue', 'active', 'true' )
        obj.UI.setValue(v.color..'Clue', CLUE_DATA[v.clue].name)
    end
end

function revealClues(clickedObject, playerColor)
    if not Player[playerColor].admin then
        return
    end
    local obj = getObjectFromGUID(TABLE_GUID)
    for k,v in pairs(players) do
        obj.UI.setAttribute(v.color..'Clue', 'visibility', '' )
    end
end

function toggleChecklist(player, value, id)
    local visible = UI.getAttribute(player.color .. 'Table', 'active')
    if visible == 'true' then
        UI.setAttribute(player.color .. 'Table', 'active', 'false')
    else
        UI.setAttribute(player.color .. 'Table', 'active', 'true')
    end
end

function buttonState(player, value, id)
    local color = string.sub(id,2,2)
    local clue = tonumber(string.sub(id,3,string.len(id)))
    local currentState = checklists[player.color][clue][color]
    local buttonColor, text

    if mode == 'normal' and currentState == 1 then
        currentState = 3
    else
        currentState = currentState + 1
    end

    if currentState == 4 then
        currentState = 1
    end
    if currentState == 1 then
        buttonColor = "#E6E42B"
        text = "Maybe"
    elseif currentState == 2 then
        buttonColor = "#F3631C"
        text = "Inverse"
    elseif currentState == 3 then
        buttonColor = "#DA1917"
        text = "No"
    end
    checklists[player.color][clue][color] = currentState

    UI.setAttribute(id, 'color', buttonColor)
    UI.setAttribute(id, 'text', text)
end

function setUI()
    local id, buttonColor, text
    for k,v in pairs(checklists) do
        for k1,v1 in pairs(v) do
            for tag,value in pairs(v1) do
                id = TAGS[k] .. tag .. k1
                if value == 1 then
                    buttonColor = "#E6E42B"
                    text = "Maybe"
                elseif value == 2 then
                    buttonColor = "#F3631C"
                    text = "Inverse"
                elseif value == 3 then
                    buttonColor = "#DA1917"
                    text = "No"
                end
                UI.setAttribute(id, 'color', buttonColor)
                UI.setAttribute(id, 'text', text)
            end
        end
    end
end

function adjustHelperColumns()
    local obj
    local seatedPlayers = getSeatedPlayers()
    local index
    if #seatedPlayers < 3 or #seatedPlayers >= 5 then
        return
    end

    if #seatedPlayers == 4 then
        hideColumn('Red')
    elseif #seatedPlayers == 3 then
        hideColumn('Red')
        hideColumn('Teal')
    end

    for k,v in pairs(COLORS) do
        index = 6 - #seatedPlayers
        for k1,v1 in pairs(seatedPlayers) do
            UI.setAttribute(TAGS[v]..'h'..TAGS[COLORS[index]], 'text', v1 )
            UI.setAttribute(TAGS[v]..'h'..TAGS[COLORS[index]], 'color', v1 )
            index = index + 1
        end
    end
end

function hideColumn(color)
    for k,v in pairs(COLORS) do
        UI.setAttribute(TAGS[v] .. 'h' .. TAGS[color], 'active', 'false')
        for i = 1,24 do
            UI.setAttribute(TAGS[v] .. TAGS[color] .. i, 'active', 'false')
        end
    end
end

function generateRandomMap()
    local structures = {}
    local randCoord = {}
    local match
    local structures = {'OW', 'TW', 'OB', 'TB', 'OG', 'TG', 'OD', 'TD'}
    local coords = {}

    data = {}
    data.mapOrder = shuffleTable({1,2,3,4,5,6})
    data.mapFlip = {}
    data.coord = {}
    for i = 1,6 do
        if math.random(0,1) == 0 then
            table.insert(data.mapFlip, false)
        else
            table.insert(data.mapFlip, true)
        end
    end
    for i = 1,8 do
        match = true
        while match == true do
            match = false
            randCoord = {math.random(1,12), math.random(1,9)}
            for j = 1, i-1 do
                if randCoord[1] == coords[j][1] and randCoord[2] == coords[j][2] then
                    match = true
                end
            end
        end
        table.insert(coords, randCoord)
    end
    for i = 1,8 do
        data.coord[structures[i]] = coords[i]
    end
    if mode == 'normal' then
        data.coord.OD = nil
        data.coord.TD = nil
    end
end

function shuffleTable(array)
    local currIndex, randIndex, temp
    currIndex = #array

    while (currIndex ~= 1) do
        randIndex = math.random(1, currIndex)
        temp = array[currIndex]
        array[currIndex] = array[randIndex]
        array[randIndex] = temp
        currIndex = currIndex - 1
    end
    return array
end

function populateMap()
    local first, last, direction, x, y, step, structure
    local xstart = 1
    local ystart = 1
    for k,v in pairs(COLORS_ALL) do
        for i1 = 1,6 do
            if not data.mapFlip[i1] then
                first = 1
                last = 18
                direction = 1
            else
                first = 18
                last = 1
                direction = -1
            end
            xstart = 1 + 6 * ((i1-1)%2)
            ystart = 1 + math.floor((i1-1)/2) * 3
            step = 1
            for i2 = first, last, direction do
                x = xstart + math.floor((step-1)/3)
                y = ystart + (step-1)%3
                map[x][y].structType = 'N'
                map[x][y].structColor = 'N'
                for k1,v1 in pairs(data.coord) do
                    if x == v1[1] and y == v1[2] then
                        map[x][y].structType = string.sub(k1,1,1)
                        map[x][y].structColor = string.sub(k1,2,2)
                    end
                end
                map[x][y].terrain = MAP[data.mapOrder[i1]][i2]
                if COUGAR[data.mapOrder[i1]][i2] == 1 then
                    map[x][y].animal = 'C'
                elseif BEAR[data.mapOrder[i1]][i2] == 1 then
                    map[x][y].animal = 'B'
                else
                    map[x][y].animal = 'N'
                end
                step = step + 1
            end
        end
    end
end

function getValidHexes(x,y)
    local hexes
    local validHexes = {{},{},{},{}}
    if x%2 == 1 then
        hexes =
        {
            {{x,y},},
            {{x-1, y-1}, {x-1, y}, {x, y-1}, {x, y+1}, {x+1, y-1}, {x+1, y}},
            {{x-2, y-1}, {x-2, y}, {x-2, y+1}, {x-1, y-2}, {x-1, y+1}, {x, y-2}, {x, y+2}, {x+1, y-2}, {x+1, y+1}, {x+2, y-1}, {x+2, y}, {x+2, y+1},},
            {{x-3, y-2}, {x-3, y-1}, {x-3, y}, {x-3, y+1}, {x-2, y-2}, {x-2, y+2}, {x-1, y-3}, {x-1, y+2}, {x,y-3}, {x,y+3}, {x+1,y-3}, {x+1,y+2}, {x+2,y-2}, {x+2,y+2}, {x+3,y-2}, {x+3,y-1}, {x+3,y}, {x+3,y+1},},
        }
    else
        hexes =
        {
            {{x,y},},
            {{x-1, y}, {x-1, y+1}, {x, y-1}, {x, y+1}, {x+1, y}, {x+1, y+1}},
            {{x-2, y-1}, {x-2, y}, {x-2, y+1}, {x-1, y-1}, {x-1, y+2}, {x, y-2}, {x, y+2}, {x+1, y-1}, {x+1, y+2}, {x+2, y-1}, {x+2, y}, {x+2, y+1},},
            {{x-3, y-1}, {x-3, y}, {x-3, y+1}, {x-3, y+2}, {x-2, y-2}, {x-2, y+2}, {x-1, y-2}, {x-1, y+3}, {x,y-3}, {x,y+3}, {x+1,y-2}, {x+1,y+3}, {x+2,y-2}, {x+2,y+2}, {x+3,y-1}, {x+3,y}, {x+3,y+1}, {x+3,y+2},},
        }
    end
    for i = 1, 4 do
        for k,v in pairs(hexes[i]) do
            if v[1] >= 1 and v[1] <= 12 and v[2] >= 1 and v[2] <= 9 then
                for j = i, 4 do
                    table.insert(validHexes[j], v)
                end
            end
        end
    end
    return validHexes
end

function findValidClues(coord)
    local validHexes = {}     --distance of 0,1,2,3
    local distance
    local value, found

    validHexes = getValidHexes(coord[1], coord[2])
    for i = 1,24 do
        found = false
        distance = CLUE_DATA[i].distance
        for k,v in pairs(validHexes[distance+1]) do
            value = map[v[1]][v[2]][CLUE_DATA[i].type]
            if value == CLUE_DATA[i].value1 or value == CLUE_DATA[i].value2 then
                found = true
                break
            end
        end
        if found then
            table.insert(cluesTable[i], (coord[1]-1) * 9 + coord[2] )
        else
            if mode == 'advanced' then
                table.insert(cluesTable[i+24], (coord[1]-1) * 9 + coord[2] )
            end
        end
    end
end

function generateClues()
    local clueMaxIndex, randomClue
    local minClues = 108
    local maxClues = 0
    local minClueIndex, maxClueIndex, removeEntries
    local found = false
    local tries = 0
    local seatedPlayers = getSeatedPlayers()

    clues = {}
    cluesTable = {}
    generatedClues = {}

    for i = 1,48 do
        cluesTable[i] = {}
    end

    if mode == 'normal' then
        clueMaxIndex = 23
    else
        clueMaxIndex = 48
    end
    for i = 1,12 do
        for j = 1,9 do
            findValidClues({i,j})
        end
    end

    clues = Global.getTable('cluesTable')
    table.insert(generatedClues, math.random(1,clueMaxIndex))
    removeEntries = {}
    for i = 1,108 do
        if not inTable(clues[generatedClues[1]], i) then
            table.insert(removeEntries, i)
        end
    end
    pruneTable(clues, removeEntries)
    if #seatedPlayers == 5 then
        randomClue = math.random(1,clueMaxIndex)
        while randomClue == generatedClues[1] or #clues[randomClue] == 0 do
            randomClue = math.random(1,clueMaxIndex)
        end
        table.insert(generatedClues, randomClue)
        removeEntries = {}
        for i = 1,108 do
            if not inTable(clues[generatedClues[2]], i) then
                table.insert(removeEntries, i)
            end
        end
        pruneTable(clues, removeEntries)
    end
    if #seatedPlayers >= 4 then
        for i = 1,clueMaxIndex do
            if #clues[i] > maxClues and i ~= generatedClues[1] and i ~= generatedClues[#seatedPlayers-3] then
                maxClues = #cluesTable[i]
                maxClueIndex = i
            end
        end
        table.insert(generatedClues, maxClueIndex)
        removeEntries = {}
        for i = 1,108 do
            if not inTable(clues[generatedClues[#generatedClues]], i) then
                table.insert(removeEntries, i)
            end
        end
        pruneTable(clues, removeEntries)
    end
    for i = 1,clueMaxIndex do
        if #clues[i] < minClues and #clues[i] > 1 then
            minClues = #clues[i]
            minClueIndex = i
        end
    end
    table.insert(generatedClues, minClueIndex)
    removeEntries = {}
    for i = 1,108 do
        if not inTable(clues[generatedClues[#generatedClues]], i) then
            table.insert(removeEntries, i)
        end
    end
    pruneTable(clues, removeEntries)

    for i = 1,clueMaxIndex do
        if #clues[i] == 1 then
            found = true
            table.insert(generatedClues, i)
            break
        end
    end
    return found
end

function inTable(tab, value)
    for k,v in pairs(tab) do
        if v == value then
            return true
        end
    end
    return false
end

function pruneTable(tab, entries)
    for k,v in pairs(entries) do
        for k1,v1 in pairs(tab) do
            for k2,v2 in pairs(v1) do
                if v2 == v then
                    table.remove(v1, k2)
                end
            end
        end
    end
end

function generateMapUI()
    local first, last, direction, x, y, step, structure
    local xstart = 1
    local ystart = 1
    for k,v in pairs(COLORS_ALL) do
        for x = 1,12 do
            for y = 1,9 do
                UI.setAttribute(TAGS[v]..x..y, 'image', map[x][y].terrain .. map[x][y].structType .. map[x][y].structColor)
                if map[x][y].animal == 'C' then
                    UI.setAttribute(TAGS[v]..'a'..x..y, 'image', 'Cougar')
                    UI.setAttribute(TAGS[v]..'a'..x..y, 'active', 'true')
                elseif map[x][y].animal == 'B' then
                    map[x][y].animal = 'B'
                    UI.setAttribute(TAGS[v]..'a'..x..y, 'image', 'Bear')
                    UI.setAttribute(TAGS[v]..'a'..x..y, 'active', 'true')
                end
            end
        end
    end
end

function changeHexColor(player, value, id)
    if UI.getAttribute(id, 'color') ~= COLOR_DARK then
        UI.setAttribute(id, 'color', COLOR_DARK)
    else
        UI.setAttribute(id, 'color', '#FFFFFF')
    end
end

function toggleMap(player, value, id)
    if not started then
        player.print('Game has not started.')
        return
    end
    local visible = UI.getAttribute(TAGS[player.color] .. 'col1', 'active')
    if visible == 'true' then
        for i = 1,12 do
            UI.setAttribute(TAGS[player.color] .. 'col' .. i, 'active', 'false')
        end
        UI.setAttribute(TAGS[player.color] .. 'Invert', 'active', 'false')
        UI.setAttribute(TAGS[player.color] .. 'Reset', 'active', 'false')
    else
        for i = 1,12 do
            UI.setAttribute(TAGS[player.color] .. 'col' .. i, 'active', 'true')
        end
        UI.setAttribute(TAGS[player.color] .. 'Invert', 'active', 'true')
        UI.setAttribute(TAGS[player.color] .. 'Reset', 'active', 'true')
    end
end

function invertMap(player, value, id)
    local iden
    for i = 1, 12 do
        for j = 1,9 do
            iden = TAGS[player.color] .. i .. j
            if UI.getAttribute(iden, 'color') ~= COLOR_DARK then
                UI.setAttribute(iden, 'color', COLOR_DARK)
            else
                UI.setAttribute(iden, 'color', '#FFFFFF')
            end
        end
    end
end

function resetMap(player, value, id)
    local iden
    for i = 1, 12 do
        for j = 1,9 do
            iden = TAGS[player.color] .. i .. j
            UI.setAttribute(iden, 'color', '#FFFFFF')
        end
    end
end
